{
    "name": "Raw HTTP Events (Long Format)",
    "description": "Query for raw HTTP events. Shouldn't be used with time series.",
    "script": "'''\nThis query outputs a table of HTTP events (request and response pairs).\nIt produces output identical to Pixie's \\`px/http_data_filtered\\` script in the Live UI.\n\nTo filter the HTTP events, uncomment lines 41-43. Alternatively, use Grafana's\ntable column filtering feature:\nhttps://grafana.com/docs/grafana/latest/visualizations/table/filter-table-columns/\n\nThis query is for use with Grafana's Pixie Datasource Plugin only,\nas it uses Grafana macros for adding Grafana dashboard context.\n'''\n\n# Import Pixie's module for querying data.\nimport px\n\n# Import HTTP events table.\ndf = px.DataFrame(table='http_events', start_time=__time_from)\n\n# Add columns for service, pod info.\ndf.svc = df.ctx['service']\ndf.pod = df.ctx['pod']\ndf = df.drop('upid')\n\n# EXAMPLE OPTIONAL FILTERS\n#df = df[px.contains(df.svc, 'catalogue')]\n#df = df[px.contains(df.pod, 'catalogue')]\n#df = df[df.req_path == '/healthz']\n\n# Avoid conversion to wide format\ndf.timestamp = df.time_\ndf = df.drop(columns=['time_'])\n\n# Keep only the selected columns (and order them in the following order)\ndf = df[['timestamp', 'remote_addr', 'remote_port', 'req_method', 'req_path', 'resp_status', 'resp_body', 'latency', 'svc', 'pod']]\n\n# Output the DataFrame\npx.display(df)\n",
    "isTabular": true,
    "columnNames": ["timestamp", "remote_addr", "remote_port", "req_method", "req_path", "resp_status",  "resp_body", "latency", "svc", "pod"]
}
